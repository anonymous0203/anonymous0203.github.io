{"version":3,"sources":["VoiceComponent.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","root","color","checked","props","Checkbox","switchBase","backgroundColor","track","Switch","VoiceComponent","original","generated","title","React","useState","state","className","map","d","i","key","src","controls","type","App","id","style","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTASsBA,YAAW,CAC/BC,KAAM,CACJC,MAAO,oBACP,YAAa,CACXA,MAAO,sBAGXC,QAAS,IAPWH,EAQnB,SAAAI,GAAK,OAAI,kBAACC,EAAA,EAAD,eAAUH,MAAM,WAAcE,OAEtBJ,YAAW,CAC7BM,WAAY,CACVJ,MAAO,oBACP,YAAa,CACXA,MAAO,qBAET,qBAAsB,CACpBK,gBAAiB,sBAGrBJ,QAAS,GACTK,MAAO,IAXWR,CAYjBS,KAkFYC,MAjDf,SAAwBN,GAAQ,IACvBO,EAA8BP,EAA9BO,SAAUC,EAAoBR,EAApBQ,UAAWC,EAAST,EAATS,MADC,EAEHC,IAAMC,SAAS,CACvCJ,WACAC,cAJ2B,mBAEtBI,EAFsB,KAO7B,OAP6B,KAQ3B,6BACE,uBAAGC,UAAU,eAAeJ,GAC5B,yBAAKI,UAAU,SACf,uBAAGA,UAAU,gBAAb,mBACA,yBAAKA,UAAU,eAEXD,EAAML,SAASO,KAAI,SAACC,EAAGC,GAAJ,OAAW,yBAAKH,UAAU,kBAAkBI,IAAKD,GACpE,yBAAKE,IAAG,iBAAYH,EAAZ,UACR,2BAAOI,UAAQ,GACb,4BAAQD,IAAG,iBAAYH,EAAZ,QAAsBK,KAAK,cADxC,yDASJ,uBAAGP,UAAU,gBAAb,oBACA,yBAAKA,UAAU,eAEXD,EAAMJ,UAAUM,KAAI,SAACC,EAAGC,GAAJ,OAAW,yBAAKH,UAAU,kBAAkBI,IAAKD,GACrE,yBAAKE,IAAG,iBAAYH,EAAZ,UACR,2BAAOI,UAAQ,GACb,4BAAQD,IAAG,iBAAYH,EAAZ,QAAsBK,KAAK,cADxC,4D,MCrEKC,MAnBf,SAAarB,GAEX,OACE,yBAAKsB,GAAG,QACN,yBAAKT,UAAU,cAEb,qFAEE,0BAAMU,MAAO,CAACzB,MAAM,YAApB,gBAEF,kBAAC,EAAD,CAAgBS,SAAU,CAAC,WAAY,WAAY,WAAY,YAAaC,UAAW,CAAC,IAAK,KAAM,IAAK,MAAOC,MAAM,QACrH,kBAAC,EAAD,CAAgBF,SAAU,CAAC,WAAY,WAAY,WAAY,YAAaC,UAAW,CAAC,KAAM,KAAM,KAAM,MAAOC,MAAM,UACvH,kBAAC,EAAD,CAAgBF,SAAU,CAAC,eAAgB,eAAgB,eAAgB,gBAAiBC,UAAW,CAAC,KAAM,KAAM,KAAM,OAAQC,MAAM,eCN5He,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,YD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9e334c70.chunk.js","sourcesContent":["import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Switch from '@material-ui/core/Switch';\n\nimport './VoiceComponent.css';\n\nconst GreenCheckbox = withStyles({\n  root: {\n    color: 'rgb(88, 195, 194)',\n    '&$checked': {\n      color: 'rgb(88, 195, 194)',\n    },\n  },\n  checked: {},\n})(props => <Checkbox color=\"default\" {...props} />);\n\nconst GreenSwitch = withStyles({\n  switchBase: {\n    color: 'rgb(88, 195, 194)',\n    '&$checked': {\n      color: 'rgb(88, 195, 194)',\n    },\n    '&$checked + $track': {\n      backgroundColor: 'rgb(88, 195, 194)',\n    },\n  },\n  checked: {},\n  track: {},\n})(Switch);\n\nconst decode = (cb, source) => {\n  let converted = null;\n  switch (cb) {\n    case 'FFF':\n      converted = source + '_S';\n      break;\n    case 'TFF':\n      converted = source + '_R';\n      break;\n    case 'FTF':\n      converted = source + '_F';\n      break;\n    case 'FFT':\n      converted = source + '_U';\n      break;\n    case 'TTF':\n      converted = source + '_RF';\n      break;\n    case 'TFT':\n      converted = source + '_RU';\n      break;\n    case 'FTT':\n      converted = source + '_RU';\n      break;\n    case 'TTT':\n      converted = source + '_RFU';\n      break;\n  }\n  return converted;\n}\n\nfunction VoiceComponent(props) {\n  const {original, generated, title} = props;\n  const [state, setState] = React.useState({\n    original,\n    generated\n  });\n\n  return (\n    <div>\n      <p className=\"block-label\">{title}</p>\n      <div className=\"block\">\n      <p className=\"speech-label\">Original Speech</p>\n      <div className=\"voice-block\">\n\n        {(state.original.map((d, i) => (<div className=\"voice-block-img\" key={i}>\n          <img src={`/audio/${d}.png`}/>\n          <audio controls>\n            <source src={`/audio/${d}.wav`}  type=\"audio/wav\" />\n\n            Your browser does not support the audio element.\n          </audio>\n        </div>)))}\n    \n      \n      </div>\n      <p className=\"speech-label\">Generated Speech</p>\n      <div className=\"voice-block\">\n\n        {(state.generated.map((d, i) => (<div className=\"voice-block-img\" key={i}>\n          <img src={`/audio/${d}.png`}/>\n          <audio controls>\n            <source src={`/audio/${d}.wav`}  type=\"audio/wav\" />\n\n            Your browser does not support the audio element.\n          </audio>\n        </div>)))}\n    \n      \n      </div>\n\n     \n      \n\n    </div>\n    </div>\n    \n  );\n}\n\nexport default VoiceComponent;\n","import React from 'react';\nimport VoiceComponent from './VoiceComponent';\n\nimport './App.css';\n\n\nfunction App(props) {\n\n  return (\n    <div id='main'>\n      <div className=\"main-inner\">\n       \n        <h1>\n        Interpreting Neural Classifiers by Eliciting Memories: \n          <font style={{color:\"#24a0de\"}}> Audio Demo</font>\n        </h1>\n        <VoiceComponent original={[\"p226_003\", \"p226_007\", \"p226_017\", \"p226_023\"]} generated={[\"3\", \"19\", \"7\", \"15\"]} title=\"Men\" />\n        <VoiceComponent original={[\"p228_006\", \"p228_032\", \"p228_090\", \"p228_117\"]} generated={[\"21\", \"22\", \"26\", \"28\"]} title=\"Women\" />\n        <VoiceComponent original={[\"YgtCQf7BmUzA\", \"YkbMrZ7BE9hg\", \"YT8U3ihbHh9A\", \"YXn0wIqnt_44\"]} generated={[\"n4\", \"n5\", \"n9\", \"n10\"]} title=\"Nonuman\" />\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('wrapper'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}